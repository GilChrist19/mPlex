// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// run_mPlex_Cpp
void run_mPlex_Cpp(const uint_least32_t& seed, const Rcpp::List& networkParameters_, const Rcpp::List& reproductionReference_, const Rcpp::List& patchReleases_, const Rcpp::NumericMatrix& migrationMale_, const Rcpp::NumericMatrix& migrationFemale_, const Rcpp::List& migrationBatch_, const std::string& output_directory, const std::string& reproductionType_, const bool& verbose);
RcppExport SEXP _mPlexCpp_run_mPlex_Cpp(SEXP seedSEXP, SEXP networkParameters_SEXP, SEXP reproductionReference_SEXP, SEXP patchReleases_SEXP, SEXP migrationMale_SEXP, SEXP migrationFemale_SEXP, SEXP migrationBatch_SEXP, SEXP output_directorySEXP, SEXP reproductionType_SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint_least32_t& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type networkParameters_(networkParameters_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type reproductionReference_(reproductionReference_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type patchReleases_(patchReleases_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type migrationMale_(migrationMale_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type migrationFemale_(migrationFemale_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type migrationBatch_(migrationBatch_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_directory(output_directorySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type reproductionType_(reproductionType_SEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    run_mPlex_Cpp(seed, networkParameters_, reproductionReference_, patchReleases_, migrationMale_, migrationFemale_, migrationBatch_, output_directory, reproductionType_, verbose);
    return R_NilValue;
END_RCPP
}
// run_mPlex_Cpp_repetitions
void run_mPlex_Cpp_repetitions(const uint_least32_t& seed, const Rcpp::List& networkParameters_, const Rcpp::List& reproductionReference_, const Rcpp::List& patchReleases_, const Rcpp::NumericMatrix& migrationMale_, const Rcpp::NumericMatrix& migrationFemale_, const Rcpp::List& migrationBatch_, const std::vector<std::string>& output_directory, const std::string& reproductionType_, const bool& verbose);
RcppExport SEXP _mPlexCpp_run_mPlex_Cpp_repetitions(SEXP seedSEXP, SEXP networkParameters_SEXP, SEXP reproductionReference_SEXP, SEXP patchReleases_SEXP, SEXP migrationMale_SEXP, SEXP migrationFemale_SEXP, SEXP migrationBatch_SEXP, SEXP output_directorySEXP, SEXP reproductionType_SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint_least32_t& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type networkParameters_(networkParameters_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type reproductionReference_(reproductionReference_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type patchReleases_(patchReleases_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type migrationMale_(migrationMale_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type migrationFemale_(migrationFemale_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type migrationBatch_(migrationBatch_SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type output_directory(output_directorySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type reproductionType_(reproductionType_SEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    run_mPlex_Cpp_repetitions(seed, networkParameters_, reproductionReference_, patchReleases_, migrationMale_, migrationFemale_, migrationBatch_, output_directory, reproductionType_, verbose);
    return R_NilValue;
END_RCPP
}
// calc_haversine
Rcpp::NumericMatrix calc_haversine(const Rcpp::NumericMatrix& latlongs);
RcppExport SEXP _mPlexCpp_calc_haversine(SEXP latlongsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type latlongs(latlongsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_haversine(latlongs));
    return rcpp_result_gen;
END_RCPP
}
// calc_LognormalKernel
Rcpp::NumericMatrix calc_LognormalKernel(const Rcpp::NumericMatrix& distMat, const double& meanlog, const double& sdlog);
RcppExport SEXP _mPlexCpp_calc_LognormalKernel(SEXP distMatSEXP, SEXP meanlogSEXP, SEXP sdlogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type distMat(distMatSEXP);
    Rcpp::traits::input_parameter< const double& >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< const double& >::type sdlog(sdlogSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_LognormalKernel(distMat, meanlog, sdlog));
    return rcpp_result_gen;
END_RCPP
}
// calc_GammaKernel
Rcpp::NumericMatrix calc_GammaKernel(const Rcpp::NumericMatrix& distMat, const double& shape, const double& rate);
RcppExport SEXP _mPlexCpp_calc_GammaKernel(SEXP distMatSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type distMat(distMatSEXP);
    Rcpp::traits::input_parameter< const double& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double& >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_GammaKernel(distMat, shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// calc_ExpKernel
Rcpp::NumericMatrix calc_ExpKernel(const Rcpp::NumericMatrix& distMat, const double& r);
RcppExport SEXP _mPlexCpp_calc_ExpKernel(SEXP distMatSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type distMat(distMatSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ExpKernel(distMat, r));
    return rcpp_result_gen;
END_RCPP
}
// calc_HurdleExpKernel
Rcpp::NumericMatrix calc_HurdleExpKernel(const Rcpp::NumericMatrix& distMat, double r, double pi);
RcppExport SEXP _mPlexCpp_calc_HurdleExpKernel(SEXP distMatSEXP, SEXP rSEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type distMat(distMatSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_HurdleExpKernel(distMat, r, pi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mPlexCpp_run_mPlex_Cpp", (DL_FUNC) &_mPlexCpp_run_mPlex_Cpp, 10},
    {"_mPlexCpp_run_mPlex_Cpp_repetitions", (DL_FUNC) &_mPlexCpp_run_mPlex_Cpp_repetitions, 10},
    {"_mPlexCpp_calc_haversine", (DL_FUNC) &_mPlexCpp_calc_haversine, 1},
    {"_mPlexCpp_calc_LognormalKernel", (DL_FUNC) &_mPlexCpp_calc_LognormalKernel, 3},
    {"_mPlexCpp_calc_GammaKernel", (DL_FUNC) &_mPlexCpp_calc_GammaKernel, 3},
    {"_mPlexCpp_calc_ExpKernel", (DL_FUNC) &_mPlexCpp_calc_ExpKernel, 2},
    {"_mPlexCpp_calc_HurdleExpKernel", (DL_FUNC) &_mPlexCpp_calc_HurdleExpKernel, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_mPlexCpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
